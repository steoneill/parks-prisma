module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregatePastWaitTime {
  count: Int!
}

type AggregateRide {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createPastWaitTime(data: PastWaitTimeCreateInput!): PastWaitTime!
  updatePastWaitTime(data: PastWaitTimeUpdateInput!, where: PastWaitTimeWhereUniqueInput!): PastWaitTime
  updateManyPastWaitTimes(data: PastWaitTimeUpdateManyMutationInput!, where: PastWaitTimeWhereInput): BatchPayload!
  upsertPastWaitTime(where: PastWaitTimeWhereUniqueInput!, create: PastWaitTimeCreateInput!, update: PastWaitTimeUpdateInput!): PastWaitTime!
  deletePastWaitTime(where: PastWaitTimeWhereUniqueInput!): PastWaitTime
  deleteManyPastWaitTimes(where: PastWaitTimeWhereInput): BatchPayload!
  createRide(data: RideCreateInput!): Ride!
  updateRide(data: RideUpdateInput!, where: RideWhereUniqueInput!): Ride
  updateManyRides(data: RideUpdateManyMutationInput!, where: RideWhereInput): BatchPayload!
  upsertRide(where: RideWhereUniqueInput!, create: RideCreateInput!, update: RideUpdateInput!): Ride!
  deleteRide(where: RideWhereUniqueInput!): Ride
  deleteManyRides(where: RideWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PastWaitTime {
  id: ID!
  waitTime: Int!
  date: String!
}

type PastWaitTimeConnection {
  pageInfo: PageInfo!
  edges: [PastWaitTimeEdge]!
  aggregate: AggregatePastWaitTime!
}

input PastWaitTimeCreateInput {
  id: ID
  waitTime: Int!
  date: String!
}

type PastWaitTimeEdge {
  node: PastWaitTime!
  cursor: String!
}

enum PastWaitTimeOrderByInput {
  id_ASC
  id_DESC
  waitTime_ASC
  waitTime_DESC
  date_ASC
  date_DESC
}

type PastWaitTimePreviousValues {
  id: ID!
  waitTime: Int!
  date: String!
}

type PastWaitTimeSubscriptionPayload {
  mutation: MutationType!
  node: PastWaitTime
  updatedFields: [String!]
  previousValues: PastWaitTimePreviousValues
}

input PastWaitTimeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PastWaitTimeWhereInput
  AND: [PastWaitTimeSubscriptionWhereInput!]
  OR: [PastWaitTimeSubscriptionWhereInput!]
  NOT: [PastWaitTimeSubscriptionWhereInput!]
}

input PastWaitTimeUpdateInput {
  waitTime: Int
  date: String
}

input PastWaitTimeUpdateManyMutationInput {
  waitTime: Int
  date: String
}

input PastWaitTimeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  waitTime: Int
  waitTime_not: Int
  waitTime_in: [Int!]
  waitTime_not_in: [Int!]
  waitTime_lt: Int
  waitTime_lte: Int
  waitTime_gt: Int
  waitTime_gte: Int
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  AND: [PastWaitTimeWhereInput!]
  OR: [PastWaitTimeWhereInput!]
  NOT: [PastWaitTimeWhereInput!]
}

input PastWaitTimeWhereUniqueInput {
  id: ID
}

type Query {
  pastWaitTime(where: PastWaitTimeWhereUniqueInput!): PastWaitTime
  pastWaitTimes(where: PastWaitTimeWhereInput, orderBy: PastWaitTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PastWaitTime]!
  pastWaitTimesConnection(where: PastWaitTimeWhereInput, orderBy: PastWaitTimeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PastWaitTimeConnection!
  ride(where: RideWhereUniqueInput!): Ride
  rides(where: RideWhereInput, orderBy: RideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ride]!
  ridesConnection(where: RideWhereInput, orderBy: RideOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RideConnection!
  node(id: ID!): Node
}

type Ride {
  id: ID!
  rideId: String!
  name: String!
  waitTime: Int!
  active: Boolean!
  fastPass: Boolean!
  status: String!
  lastUpdate: String
}

type RideConnection {
  pageInfo: PageInfo!
  edges: [RideEdge]!
  aggregate: AggregateRide!
}

input RideCreateInput {
  id: ID
  rideId: String!
  name: String!
  waitTime: Int!
  active: Boolean!
  fastPass: Boolean!
  status: String!
  lastUpdate: String
}

type RideEdge {
  node: Ride!
  cursor: String!
}

enum RideOrderByInput {
  id_ASC
  id_DESC
  rideId_ASC
  rideId_DESC
  name_ASC
  name_DESC
  waitTime_ASC
  waitTime_DESC
  active_ASC
  active_DESC
  fastPass_ASC
  fastPass_DESC
  status_ASC
  status_DESC
  lastUpdate_ASC
  lastUpdate_DESC
}

type RidePreviousValues {
  id: ID!
  rideId: String!
  name: String!
  waitTime: Int!
  active: Boolean!
  fastPass: Boolean!
  status: String!
  lastUpdate: String
}

type RideSubscriptionPayload {
  mutation: MutationType!
  node: Ride
  updatedFields: [String!]
  previousValues: RidePreviousValues
}

input RideSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RideWhereInput
  AND: [RideSubscriptionWhereInput!]
  OR: [RideSubscriptionWhereInput!]
  NOT: [RideSubscriptionWhereInput!]
}

input RideUpdateInput {
  rideId: String
  name: String
  waitTime: Int
  active: Boolean
  fastPass: Boolean
  status: String
  lastUpdate: String
}

input RideUpdateManyMutationInput {
  rideId: String
  name: String
  waitTime: Int
  active: Boolean
  fastPass: Boolean
  status: String
  lastUpdate: String
}

input RideWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  rideId: String
  rideId_not: String
  rideId_in: [String!]
  rideId_not_in: [String!]
  rideId_lt: String
  rideId_lte: String
  rideId_gt: String
  rideId_gte: String
  rideId_contains: String
  rideId_not_contains: String
  rideId_starts_with: String
  rideId_not_starts_with: String
  rideId_ends_with: String
  rideId_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  waitTime: Int
  waitTime_not: Int
  waitTime_in: [Int!]
  waitTime_not_in: [Int!]
  waitTime_lt: Int
  waitTime_lte: Int
  waitTime_gt: Int
  waitTime_gte: Int
  active: Boolean
  active_not: Boolean
  fastPass: Boolean
  fastPass_not: Boolean
  status: String
  status_not: String
  status_in: [String!]
  status_not_in: [String!]
  status_lt: String
  status_lte: String
  status_gt: String
  status_gte: String
  status_contains: String
  status_not_contains: String
  status_starts_with: String
  status_not_starts_with: String
  status_ends_with: String
  status_not_ends_with: String
  lastUpdate: String
  lastUpdate_not: String
  lastUpdate_in: [String!]
  lastUpdate_not_in: [String!]
  lastUpdate_lt: String
  lastUpdate_lte: String
  lastUpdate_gt: String
  lastUpdate_gte: String
  lastUpdate_contains: String
  lastUpdate_not_contains: String
  lastUpdate_starts_with: String
  lastUpdate_not_starts_with: String
  lastUpdate_ends_with: String
  lastUpdate_not_ends_with: String
  AND: [RideWhereInput!]
  OR: [RideWhereInput!]
  NOT: [RideWhereInput!]
}

input RideWhereUniqueInput {
  id: ID
  rideId: String
}

type Subscription {
  pastWaitTime(where: PastWaitTimeSubscriptionWhereInput): PastWaitTimeSubscriptionPayload
  ride(where: RideSubscriptionWhereInput): RideSubscriptionPayload
}
`
      }
    